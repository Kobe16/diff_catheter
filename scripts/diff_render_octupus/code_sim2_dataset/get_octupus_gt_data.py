import numpy as np
import scipy.optimize

import pdb

# def get_intersect(a1, a2, b1, b2):
#     """
#     Returns the point of intersection of the lines passing through a2,a1 and b2,b1.
#     a1: [x, y, z] a point on the first line
#     a2: [x, y, z] another point on the first line
#     b1: [x, y, z] a point on the second line
#     b2: [x, y, z] another point on the second line
#     """
#     lines = np.vstack([a1, a2, b1, b2])  # s for stacked


# takes in two lines, the line formed by pt1 and pt2, and the line formed by pt3 and pt4, and finds their intersection or closest point
# please ref : https://stackoverflow.com/questions/44631259/line-line-intersection-in-python-with-numpy
# another ref (with analytical form) : https://stackoverflow.com/questions/2316490/the-algorithm-to-find-the-point-of-intersection-of-two-3d-line-segment
def get_intersect(pt1, pt2, pt3, pt4):
    #least squares method
    def errFunc(estimates):
        s, t = estimates
        x = pt1 + s * (pt2 - pt1) - (pt3 + t * (pt4 - pt3))
        return x

    estimates = [1, 1]

    sols = scipy.optimize.least_squares(errFunc, estimates)
    s, t = sols.x

    x1 = pt1[0] + s * (pt2[0] - pt1[0])
    x2 = pt3[0] + t * (pt4[0] - pt3[0])
    y1 = pt1[1] + s * (pt2[1] - pt1[1])
    y2 = pt3[1] + t * (pt4[1] - pt3[1])
    z1 = pt1[2] + s * (pt2[2] - pt1[2])
    z2 = pt3[2] + t * (pt4[2] - pt3[2])

    x = (x1 + x2) / 2  # halfway point if they don't match
    y = (y1 + y2) / 2  # halfway point if they don't match
    z = (z1 + z2) / 2  # halfway point if they don't match

    return (x, y, z)


gt_data = np.array([[0.5, 0.5, 0.5, 1.9999573999981042],
                    [1.8333901099811494, 0.49983521955662175, 0.5001647804433778, 1.9447844574484754],
                    [3.16677281276638, 0.5034418352683987, 0.4965581647316009, 1.8896110140738087],
                    [4.500124924758769, 0.5110609980612102, 0.48893900193879064, 1.8344384171318857],
                    [5.833411885550419, 0.5232170029532549, 0.4767829970467472, 1.779265177944665],
                    [7.166594592355317, 0.5402776291951719, 0.45972237080482947, 1.7240924725225804],
                    [8.499617872917753, 0.562797490398078, 0.43720250960192175, 1.6689195263082395],
                    [9.832411459334212, 0.5913888164573924, 0.40861118354260695, 1.6137466423254523],
                    [11.1648854939798, 0.6267129040301097, 0.37328709596989235, 1.5585742214862248],
                    [12.496918514712945, 0.6695951181046685, 0.3304048818953291, 1.5034011879280844],
                    [13.828356747840836, 0.720941036598198, 0.2790589634018051, 1.448229492459227],
                    [15.158991418522366, 0.7818374839466644, 0.2181625160533312, 1.3930567602361594],
                    [16.48855213521444, 0.8535469445010143, 0.1464530554989842, 1.3378854338241708],
                    [17.8166764060598, 0.9375289872639139, 0.06247101273608284, 1.2827140505683357],
                    [19.142871412658177, 1.0355894904524718, -0.035589490452474004, 1.227542551380248],
                    [20.466492659964043, 1.1497329428256093, -0.1497329428256126, 1.1723731218934799],
                    [21.786628534225176, 1.2825215719273408, -0.2825215719273392, 1.117203414889629],
                    [23.102069262798047, 1.4368512322459528, -0.4368512322459528, 1.0620345139712926],
                    [24.411106217083624, 1.6163373640448997, -0.6163373640449002, 1.006867406113895],
                    [25.711379051367835, 1.825232506682241, -0.8252325066822379, 0.9517014000564997],
                    [26.999550248368518, 2.06870973013604, -1.0687097301360386, 0.896537214490479],
                    [28.27089378898062, 2.352944540307212, -1.3529445403072096, 0.8413747365882642],
                    [29.51865219856459, 2.6852960486801454, -1.6852960486801423, 0.7862145779775267],
                    [30.733131144223417, 3.0743649247789047, -2.074364924778902, 0.7310570092551584],
                    [31.900421984087576, 3.5298816717747843, -2.529881671774776, 0.6759004412727948],
                    [33.00074987396374, 4.0621656024102615, -3.0621656024102606, 0.6207447712773672],
                    [34.00667230795771, 4.680739199967527, -3.6807391999675203, 0.5655872740269257],
                    [34.88219603795088, 5.391497867503448, -4.39149786750346, 0.5104209858667287],
                    [35.58591990879948, 6.191963209589745, -5.191963209589755, 0.4552387273567064],
                    [36.085861528232165, 7.06569109504143, -6.065691095041432, 0.40002940478525545]])

gt_centline = gt_data[:, 0:-1]
tangent_p0 = gt_centline[1, :] - gt_centline[0, :]
tangent_p1 = gt_centline[-3, :] - gt_centline[-1, :]

p0 = gt_centline[0, :]
p0_vec = p0 + tangent_p0 / np.linalg.norm(tangent_p0, ord=None, axis=0, keepdims=False)
p1 = gt_centline[-1, :]
p1_vec = p1 + tangent_p0 / np.linalg.norm(tangent_p1, ord=None, axis=0, keepdims=False)

(x, y, z) = get_intersect(p0, p0_vec, p1, p1_vec)

print(x, y, z)

# pdb.set_trace()

np.save('/home/fei/diff_catheter/data/octupus_frames/top/frame_0199.npy', gt_data)
